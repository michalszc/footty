// <auto-generated />
using System;
using Footty.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace footty.Migrations
{
    [DbContext(typeof(FoottyContext))]
    [Migration("20230531210317_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.5");

            modelBuilder.Entity("footty.Models.Match", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("date")
                        .HasColumnType("TEXT");

                    b.Property<int>("opponent_goals")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("opponentid")
                        .HasColumnType("INTEGER");

                    b.Property<string>("place")
                        .HasColumnType("TEXT");

                    b.Property<int>("team_goals")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("teamid")
                        .HasColumnType("INTEGER");

                    b.HasKey("id");

                    b.HasIndex("opponentid");

                    b.HasIndex("teamid");

                    b.ToTable("Match");
                });

            modelBuilder.Entity("footty.Models.Player", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("assists")
                        .HasColumnType("INTEGER");

                    b.Property<int>("games_played")
                        .HasColumnType("INTEGER");

                    b.Property<int>("goals_scored")
                        .HasColumnType("INTEGER");

                    b.Property<float>("minutes_played")
                        .HasColumnType("REAL");

                    b.Property<string>("position")
                        .HasColumnType("TEXT");

                    b.Property<string>("shirt_number")
                        .HasColumnType("TEXT");

                    b.Property<int?>("teamid")
                        .HasColumnType("INTEGER");

                    b.HasKey("id");

                    b.HasIndex("teamid");

                    b.ToTable("Player");
                });

            modelBuilder.Entity("footty.Models.Stadium", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("capacity")
                        .HasColumnType("INTEGER");

                    b.Property<string>("city")
                        .HasColumnType("TEXT");

                    b.Property<float>("latitude")
                        .HasColumnType("REAL");

                    b.Property<float>("longitude")
                        .HasColumnType("REAL");

                    b.Property<string>("name")
                        .HasColumnType("TEXT");

                    b.Property<int?>("teamid")
                        .HasColumnType("INTEGER");

                    b.HasKey("id");

                    b.HasIndex("teamid");

                    b.ToTable("Stadium");
                });

            modelBuilder.Entity("footty.Models.Team", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("name")
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.ToTable("Team");
                });

            modelBuilder.Entity("footty.Models.User", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("can_edit")
                        .HasColumnType("INTEGER");

                    b.Property<string>("password")
                        .HasColumnType("TEXT");

                    b.Property<string>("token")
                        .HasColumnType("TEXT");

                    b.Property<string>("username")
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            id = 1,
                            can_edit = true,
                            password = "81dc9bdb52d04dc20036dbd8313ed055",
                            token = "6Y4ne9npAJFyssinCYVY2GfC",
                            username = "admin"
                        });
                });

            modelBuilder.Entity("footty.Models.Match", b =>
                {
                    b.HasOne("footty.Models.Team", "opponent")
                        .WithMany()
                        .HasForeignKey("opponentid");

                    b.HasOne("footty.Models.Team", "team")
                        .WithMany()
                        .HasForeignKey("teamid");

                    b.Navigation("opponent");

                    b.Navigation("team");
                });

            modelBuilder.Entity("footty.Models.Player", b =>
                {
                    b.HasOne("footty.Models.Team", "team")
                        .WithMany()
                        .HasForeignKey("teamid");

                    b.Navigation("team");
                });

            modelBuilder.Entity("footty.Models.Stadium", b =>
                {
                    b.HasOne("footty.Models.Team", "team")
                        .WithMany()
                        .HasForeignKey("teamid");

                    b.Navigation("team");
                });
#pragma warning restore 612, 618
        }
    }
}
