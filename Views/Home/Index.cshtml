@model IEnumerable<footty.Models.Match>

@{
    ViewData["Title"] = "Home Page";
}

<div class="text-center">
    <div class="row">
        <div class="col-sm-4">
            <h1>Favourite club</h1>
            <h3>@ViewData["fav_team"]</h3>
            <h5>Be where your club is! &#9917</h5>
        </div>
        <div class="col-sm-8">
            <h3>Last 5 games</h3>
            <table class="table">
            <tbody>
        @foreach (var item in Model) {
                <tr class="text-center">
                    <td>
                    <h4>@Html.DisplayFor(modelItem => item.date)</h4>
                    <h4>
                        @if (item.place == "Home")
                        {
                            @:&#127968
                        } else {
                            @:✈️
                        }
                        @Html.DisplayFor(modelItem => item.team!.name)
                        @Html.DisplayFor(modelItem => item.team_goals)
                        -
                        @Html.DisplayFor(modelItem => item.opponent_goals)
                        @Html.DisplayFor(modelItem => item.opponent!.name)
                        @if (item.place == "Home")
                        {
                            @:✈️
                        } else {
                            @:&#127968
                        }
                    </h4>
                    </td>
                </tr>
        }
            </tbody>
        </table>
        </div>
        <div id="map"></div>
    </div>
</div>

<script defer>
    /* OSM & OL example code provided by https://mediarealm.com.au/ */
    let map;
    const mapLat = 40;
    const mapLng = -3;
    const mapDefaultZoom = 6.5;
    
    function initialize_map() {
      map = new ol.Map({
        target: "map",
        layers: [
            new ol.layer.Tile({
                source: new ol.source.OSM({
                      url: "https://a.tile.openstreetmap.org/{z}/{x}/{y}.png"
                })
            })
        ],
        view: new ol.View({
            center: ol.proj.fromLonLat([mapLng, mapLat]),
            zoom: mapDefaultZoom
        })
      });
    }

    function add_map_point(lat, lng) {
      const vectorLayer = new ol.layer.Vector({
        source:new ol.source.Vector({
          features: [new ol.Feature({
                geometry: new ol.geom.Point(ol.proj.transform([parseFloat(lng), parseFloat(lat)], 'EPSG:4326', 'EPSG:3857')),
            })]
        }),
        style: new ol.style.Style({
          image: new ol.style.Icon({
            anchor: [0.5, 0.5],
            anchorXUnits: "fraction",
            anchorYUnits: "fraction",
            src: "https://upload.wikimedia.org/wikipedia/commons/e/ec/RedDot.svg"
          })
        })
      });

      map.addLayer(vectorLayer); 
    }

initialize_map(); add_map_point("43.264282", "-2.950366");
@* @((string)ViewData["lat"]!).Replace(",", "."), @((string)ViewData["long"]!).Replace(",", ".") *@
  </script>
